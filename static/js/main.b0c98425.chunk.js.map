{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","title","handleInputChange","handleSelectChange","className","type","value","onChange","map","todo","classNames","completed","htmlFor","id","checked","readOnly","active","userId","onClick","request","url","fetch","then","response","ok","Error","status","json","CurrentUser","state","user","this","loadUserDate","prevProps","props","setState","name","email","phone","React","Component","App","select","clearUserId","event","prevState","target","filterTodos","a","filter","toLowerCase","includes","readyTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0c98425.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  selectedUserId: number,\n  title: string,\n  handleInputChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  handleSelectChange: (event: ChangeEvent<HTMLSelectElement>) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectUser, selectedUserId, title, handleInputChange, handleSelectChange,\n}) => (\n  <div className=\"TodoList\">\n    <input\n      type=\"text\"\n      value={title}\n      onChange={handleInputChange}\n    />\n\n    <select onChange={handleSelectChange}>\n      <option value=\"all\">all</option>\n      <option value=\"completed\">completed</option>\n      <option value=\"active\">active</option>\n    </select>\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <label htmlFor=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                id=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                'TodoList__user-button--selected',\n                'button',\n                { active: selectedUserId === todo.userId },\n              )}\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Server is not response ${response.status}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\nexport const getUser = (userId: number): Promise<User> => (\n  request(`/users/${userId}`)\n);\n","import React from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n}\n\ninterface State {\n  user: User,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n  };\n\n  componentDidMount() {\n    this.loadUserDate();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserDate();\n    }\n  }\n\n  loadUserDate() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { userId } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return 'Dont loadded';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${userId}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n  title: string,\n  select: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    title: '',\n    select: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      title: event.target.value,\n    }));\n  };\n\n  handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      select: event.target.value,\n    }));\n  };\n\n  filterTodos = (a: Todo[]) => {\n    return a.filter(todo => (\n      todo.title.toLowerCase().includes(this.state.title.toLowerCase())\n    ));\n  };\n\n  readyTodos = () => {\n    const { select, todos } = this.state;\n\n    switch (select) {\n      case 'all':\n        return this.filterTodos(todos);\n\n      case 'completed':\n        return this.filterTodos(todos.filter(todo => todo.completed));\n\n      case 'active':\n        return this.filterTodos(todos.filter(todo => !todo.completed));\n\n      default:\n        throw new Error('Error');\n    }\n  };\n\n  render() {\n    const { selectedUserId, title, todos } = this.state;\n\n    if (!todos) {\n      return '';\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.readyTodos()}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            title={title}\n            handleInputChange={this.handleInputChange}\n            handleSelectChange={this.handleSelectChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n\n          {!!selectedUserId && (\n            <button\n              type=\"button\"\n              className=\"\"\n              onClick={this.clearUserId}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}