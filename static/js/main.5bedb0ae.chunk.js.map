{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","select","handleInputChange","event","setState","prevState","target","value","handleSelectChange","filterTodos","todosFilteredBySelect","filter","todo","toLowerCase","includes","readyTodos","todos","props","completed","Error","this","selectedUserId","selectUser","className","type","onChange","map","classNames","htmlFor","id","checked","readOnly","active","userId","onClick","React","Component","request","url","fetch","then","response","ok","status","json","CurrentUser","user","loadUser","prevProps","name","email","phone","App","clearUserId","a","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bedb0ae.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  selectedUserId: number,\n}\n\ninterface State {\n  title: string,\n  select: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    title: '',\n    select: 'all',\n  };\n\n  handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      title: event.target.value,\n    }));\n  };\n\n  handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      select: event.target.value,\n    }));\n  };\n\n  filterTodos = (todosFilteredBySelect: Todo[]) => {\n    return todosFilteredBySelect.filter(todo => (\n      todo.title.toLowerCase().includes(this.state.title.toLowerCase())\n    ));\n  };\n\n  readyTodos = () => {\n    const { todos } = this.props;\n    const { select } = this.state;\n\n    switch (select) {\n      case 'all':\n        return this.filterTodos(todos);\n\n      case 'completed':\n        return this.filterTodos(todos.filter(todo => todo.completed));\n\n      case 'active':\n        return this.filterTodos(todos.filter(todo => !todo.completed));\n\n      default:\n        throw new Error('Error');\n    }\n  };\n\n  render() {\n    const { selectedUserId, selectUser } = this.props;\n    const { title } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          value={title}\n          onChange={this.handleInputChange}\n        />\n\n        <select onChange={this.handleSelectChange}>\n          <option value=\"all\">all</option>\n          <option value=\"completed\">completed</option>\n          <option value=\"active\">active</option>\n        </select>\n\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.readyTodos().map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <label htmlFor=\"checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'TodoList__user-button--selected',\n                    'button',\n                    { active: selectedUserId === todo.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Server is not response ${response.status}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\nexport const getUserById = (userId: number): Promise<User> => (\n  request(`/users/${userId}`)\n);\n","import React from 'react';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n}\n\ninterface State {\n  user: User | null,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser() {\n    getUserById(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { userId } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return 'Dont loadded';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${userId}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    if (todos.length === 0) {\n      return '';\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n\n          {!!selectedUserId && (\n            <button\n              type=\"button\"\n              className=\"\"\n              onClick={this.clearUserId}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}